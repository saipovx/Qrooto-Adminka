{"ast":null,"code":"var _jsxFileName = \"/home/t1/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/kuplatform/admin-stage/src/AuthContext.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { createContext, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const apiUrl = process.env.REACT_APP_API_URL;\n  const refreshToken = () => {\n    const refresh_token = localStorage.getItem('refresh_token');\n    if (refresh_token) {\n      axios.post(`${apiUrl}/api/auth/refresh`, {}, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${refresh_token}`\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          const {\n            access_token\n          } = res.data;\n          localStorage.setItem('access_token', access_token);\n        }\n      }).catch(error => {});\n    }\n  };\n\n  // const setupTokenRefresh = () => {\n  //   const access_token = localStorage.getItem('access_token');\n  //   if (access_token) {\n  //     const expirationTime = Number(localStorage.getItem('expiration_time')); // Парсим время истечения из localStorage\n  //     const currentTime = Date.now();\n\n  //     if (expirationTime > currentTime) {\n  //       const timeUntilRefresh = expirationTime - currentTime;\n  //       setTimeout(() => {\n  //         refreshToken();\n  //         setupTokenRefresh(); // Запустите обновление таймера\n  //       }, timeUntilRefresh);\n  //     }\n  //   }\n  // };\n\n  // // Вызовите функцию setupTokenRefresh при монтировании компонента\n  // useEffect(() => {\n  //   setupTokenRefresh();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      refreshToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","createContext","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","children","apiUrl","process","env","REACT_APP_API_URL","refreshToken","refresh_token","localStorage","getItem","post","headers","then","res","status","access_token","data","setItem","catch","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s","$RefreshReg$"],"sources":["/home/t1/Рабочий стол/kuplatform/admin-stage/src/AuthContext.js"],"sourcesContent":["import axios from 'axios';\nimport { createContext, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  const refreshToken = () => {\n\n    const refresh_token = localStorage.getItem('refresh_token');\n  \n    if (refresh_token) {\n\n      axios\n\n        .post(`${apiUrl}/api/auth/refresh`, {\n\n        },\n        \n        {\n\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${refresh_token}` \n        }\n\n        }\n          )\n        .then((res) => {\n\n          if (res.status === 200) {\n\n            const { access_token } = res.data;\n\n            localStorage.setItem('access_token', access_token);\n\n          }\n\n        })\n\n        .catch((error) => {\n\n        });\n    }\n  };\n\n  // const setupTokenRefresh = () => {\n  //   const access_token = localStorage.getItem('access_token');\n  //   if (access_token) {\n  //     const expirationTime = Number(localStorage.getItem('expiration_time')); // Парсим время истечения из localStorage\n  //     const currentTime = Date.now();\n\n  //     if (expirationTime > currentTime) {\n  //       const timeUntilRefresh = expirationTime - currentTime;\n  //       setTimeout(() => {\n  //         refreshToken();\n  //         setupTokenRefresh(); // Запустите обновление таймера\n  //       }, timeUntilRefresh);\n  //     }\n  //   }\n  // };\n\n  // // Вызовите функцию setupTokenRefresh при монтировании компонента\n  // useEffect(() => {\n  //   setupTokenRefresh();\n  // }, []);\n\n\n  return (\n    <AuthContext.Provider value={{ refreshToken }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC5D,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,WAAW,gBAAGN,aAAa,EAAE;AAE1C,OAAO,MAAMO,YAAY,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAEvC,MAAME,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EAE5C,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAEzB,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAE3D,IAAIF,aAAa,EAAE;MAEjBhB,KAAK,CAEFmB,IAAI,CAAE,GAAER,MAAO,mBAAkB,EAAE,CAEpC,CAAC,EAED;QAEES,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASJ,aAAc;QAC7C;MAEA,CAAC,CACE,CACFK,IAAI,CAAEC,GAAG,IAAK;QAEb,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UAEtB,MAAM;YAAEC;UAAa,CAAC,GAAGF,GAAG,CAACG,IAAI;UAEjCR,YAAY,CAACS,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;QAEpD;MAEF,CAAC,CAAC,CAEDG,KAAK,CAAEC,KAAK,IAAK,CAElB,CAAC,CAAC;IACN;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA,oBACEtB,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEf;IAAa,CAAE;IAAAL,QAAA,EAC3CA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAE3B,CAAC;AAACC,EAAA,GAtEW3B,YAAY;AAwEzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAOnC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAAC8B,EAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}