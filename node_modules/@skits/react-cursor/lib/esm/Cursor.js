import { lerp, nearlyEqual } from './utils';
var Cursor = /** @class */ (function () {
    function Cursor(el, onMouseDown, onMouseUp) {
        var _this = this;
        this.speed = 0.2;
        this.animationFrame = null;
        this.isAnimating = false;
        this.cursorElement = el;
        this.shapeElement = el.querySelector('div');
        this.bounds = this.getBounds();
        this.mouseCoords = { x: -100, y: -100 };
        this.cursorCoords = { x: 0, y: 0 };
        window.addEventListener('mousemove', function (e) { return _this.onMouseMove(e); });
        window.addEventListener('mousedown', function () { return _this.onMouseDown(onMouseDown); });
        window.addEventListener('mouseup', function () { return _this.onMouseUp(onMouseUp); });
        this.run();
    }
    Cursor.prototype.run = function () {
        var _this = this;
        this.isAnimating = true;
        this.animationFrame = requestAnimationFrame(function () { return _this.animateCursor(); });
    };
    Cursor.prototype.stop = function () {
        this.animationFrame && cancelAnimationFrame(this.animationFrame);
    };
    Cursor.prototype.getBounds = function () {
        return this.cursorElement.getBoundingClientRect();
    };
    Cursor.prototype.animateCursor = function () {
        this.bounds = this.getBounds();
        var xOffset = this.bounds.width / 2;
        var yOffset = this.bounds.height / 2;
        var x = lerp(this.cursorCoords.x, this.mouseCoords.x, this.speed);
        var y = lerp(this.cursorCoords.y, this.mouseCoords.y, this.speed);
        // Move cursor position
        this.cursorElement.style.transform = "translate(".concat(x - xOffset, "px, ").concat(y - yOffset, "px)");
        // Save cursor coordinates
        this.cursorCoords = { x: x, y: y };
        if (nearlyEqual(this.mouseCoords.x, x)) {
            this.isAnimating = false;
            return;
        }
        this.run();
    };
    Cursor.prototype.onMouseMove = function (e) {
        // console.log({
        //   clientX: e.clientX,
        //   clientY: e.clientY,
        //   width: this.bounds.width,
        //   height: this.bounds.height,
        //   left: e.clientX - this.bounds.width / 2,
        //   top: e.clientY - this.bounds.height / 2,
        // });
        this.mouseCoords = {
            x: e.clientX,
            y: e.clientY,
        };
        // Only trigger animation on mouse movement if there is no animation running
        if (!this.isAnimating) {
            this.run();
        }
    };
    Cursor.prototype.onMouseDown = function (callback) {
        if (callback && this.shapeElement) {
            callback(this.cursorElement, this.shapeElement);
            this.run();
        }
    };
    Cursor.prototype.onMouseUp = function (callback) {
        if (callback && this.shapeElement) {
            callback(this.cursorElement, this.shapeElement);
            this.run();
        }
    };
    return Cursor;
}());
export default Cursor;
